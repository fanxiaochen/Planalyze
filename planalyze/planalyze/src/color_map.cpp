#include "color_map.h"

static const double jet[256][3] = {
  0,         0,         0.5625,
  0,         0,         0.6250,
  0,         0,         0.6875,
  0,         0,         0.7500,
  0,         0,         0.8125,
  0,         0,         0.8750,
  0,         0,         0.9375,
  0,         0,         1.0000,
  0,         0.0625,    1.0000,
  0,         0.1250,    1.0000,
  0,         0.1875,    1.0000,
  0,         0.2500,    1.0000,
  0,         0.3125,    1.0000,
  0,         0.3750,    1.0000,
  0,         0.4375,    1.0000,
  0,         0.5000,    1.0000,
  0,         0.5625,    1.0000,
  0,         0.6250,    1.0000,
  0,         0.6875,    1.0000,
  0,         0.7500,    1.0000,
  0,         0.8125,    1.0000,
  0,         0.8750,    1.0000,
  0,         0.9375,    1.0000,
  0,         1.0000,    1.0000,
  0.0625,    1.0000,    0.9375,
  0.1250,    1.0000,    0.8750,
  0.1875,    1.0000,    0.8125,
  0.2500,    1.0000,    0.7500,
  0.3125,    1.0000,    0.6875,
  0.3750,    1.0000,    0.6250,
  0.4375,    1.0000,    0.5625,
  0.5000,    1.0000,    0.5000,
  0.5625,    1.0000,    0.4375,
  0.6250,    1.0000,    0.3750,
  0.6875,    1.0000,    0.3125,
  0.7500,    1.0000,    0.2500,
  0.8125,    1.0000,    0.1875,
  0.8750,    1.0000,    0.1250,
  0.9375,    1.0000,    0.0625,
  1.0000,    1.0000,    0,
  1.0000,    0.9375,    0,
  1.0000,    0.8750,    0,
  1.0000,    0.8125,    0,
  1.0000,    0.7500,    0,
  1.0000,    0.6875,    0,
  1.0000,    0.6250,    0,
  1.0000,    0.5625,    0,
  1.0000,    0.5000,    0,
  1.0000,    0.4375,    0,
  1.0000,    0.3750,    0,
  1.0000,    0.3125,    0,
  1.0000,    0.2500,    0,
  1.0000,    0.1875,    0,
  1.0000,    0.1250,    0,
  1.0000,    0.0625,    0,
  1.0000,    0,         0,
  0.9375,    0,         0,
  0.8750,    0,         0,
  0.8125,    0,         0,
  0.7500,    0,         0,
  0.6875,    0,         0,
  0.6250,    0,         0,
  0.5625,    0,         0,
  0.5000,    0,         0
};

static const double discrete_total[256][3] = {
  0.9412,		0.9725,		1.0000,
  0.9804,		0.9216,		0.8431,
  0.0000,		1.0000,		1.0000,
  0.4980,		1.0000,		0.8314,
  0.9412,		1.0000,		1.0000,
  0.9608,		0.9608,		0.8627,
  1.0000,		0.8941,		0.7686,
  0.0000,		0.0000,		0.0000,
  1.0000,		0.9216,		0.8039,
  0.0000,		0.0000,		1.0000,
  0.5412,		0.1686,		0.8863,
  0.6471,		0.1647,		0.1647,
  0.8706,		0.7216,		0.5294,
  0.3725,		0.6196,		0.6275,
  0.4980,		1.0000,		0.0000,
  0.8235,		0.4118,		0.1176,
  1.0000,		0.4980,		0.3137,
  0.3922,		0.5843,		0.9294,
  1.0000,		0.9725,		0.8627,
  0.8627,		0.0784,		0.2353,
  0.0000,		1.0000,		1.0000,
  0.0000,		0.0000,		0.5451,
  0.0000,		0.5451,		0.5451,
  0.7216,		0.5255,		0.0431,
  0.6627,		0.6627,		0.6627,
  0.0000,		0.3922,		0.0000,
  0.6627,		0.6627,		0.6627,
  0.7412,		0.7176,		0.4196,
  0.5451,		0.0000,		0.5451,
  0.3333,		0.4196,		0.1843,
  1.0000,		0.5490,		0.0000,
  0.6000,		0.1961,		0.8000,
  0.5451,		0.0000,		0.0000,
  0.9137,		0.5882,		0.4784,
  0.5608,		0.7373,		0.5608,
  0.2824,		0.2392,		0.5451,
  0.1843,		0.3098,		0.3098,
  0.1843,		0.3098,		0.3098,
  0.0000,		0.8078,		0.8196,
  0.5804,		0.0000,		0.8275,
  1.0000,		0.0784,		0.5765,
  0.0000,		0.7490,		1.0000,
  0.4118,		0.4118,		0.4118,
  0.4118,		0.4118,		0.4118,
  0.1176,		0.5647,		1.0000,
  0.6980,		0.1333,		0.1333,
  1.0000,		0.9804,		0.9412,
  0.1333,		0.5451,		0.1333,
  1.0000,		0.0000,		1.0000,
  0.8627,		0.8627,		0.8627,
  0.9725,		0.9725,		1.0000,
  1.0000,		0.8431,		0.0000,
  0.8549,		0.6471,		0.1255,
  0.5020,		0.5020,		0.5020,
  0.5020,		0.5020,		0.5020,
  0.0000,		0.5020,		0.0000,
  0.6784,		1.0000,		0.1843,
  0.9412,		1.0000,		0.9412,
  1.0000,		0.4118,		0.7059,
  0.8039,		0.3608,		0.3608,
  0.2941,		0.0000,		0.5098,
  1.0000,		1.0000,		0.9412,
  0.9412,		0.9020,		0.5490,
  0.9020,		0.9020,		0.9804,
  1.0000,		0.9412,		0.9608,
  0.4863,		0.9882,		0.0000,
  1.0000,		0.9804,		0.8039,
  0.6784,		0.8471,		0.9020,
  0.9412,		0.5020,		0.5020,
  0.8784,		1.0000,		1.0000,
  0.9804,		0.9804,		0.8235,
  0.8275,		0.8275,		0.8275,
  0.5647,		0.9333,		0.5647,
  0.8275,		0.8275,		0.8275,
  1.0000,		0.7137,		0.7569,
  1.0000,		0.6275,		0.4784,
  0.1255,		0.6980,		0.6667,
  0.5294,		0.8078,		0.9804,
  0.4667,		0.5333,		0.6000,
  0.4667,		0.5333,		0.6000,
  0.6902,		0.7686,		0.8706,
  1.0000,		1.0000,		0.8784,
  0.0000,		1.0000,		0.0000,
  0.1961,		0.8039,		0.1961,
  0.9804,		0.9412,		0.9020,
  1.0000,		0.0000,		1.0000,
  0.5020,		0.0000,		0.0000,
  0.4000,		0.8039,		0.6667,
  0.0000,		0.0000,		0.8039,
  0.7294,		0.3333,		0.8275,
  0.5765,		0.4392,		0.8588,
  0.2353,		0.7020,		0.4431,
  0.4824,		0.4078,		0.9333,
  0.0000,		0.9804,		0.6039,
  0.2824,		0.8196,		0.8000,
  0.7804,		0.0824,		0.5216,
  0.0980,		0.0980,		0.4392,
  0.9608,		1.0000,		0.9804,
  1.0000,		0.8941,		0.8824,
  1.0000,		0.8941,		0.7098,
  1.0000,		0.8706,		0.6784,
  0.0000,		0.0000,		0.5020,
  0.9922,		0.9608,		0.9020,
  0.5020,		0.5020,		0.0000,
  0.4196,		0.5569,		0.1373,
  1.0000,		0.6471,		0.0000,
  1.0000,		0.2706,		0.0000,
  0.8549,		0.4392,		0.8392,
  0.9333,		0.9098,		0.6667,
  0.5961,		0.9843,		0.5961,
  0.6863,		0.9333,		0.9333,
  0.8588,		0.4392,		0.5765,
  1.0000,		0.9373,		0.8353,
  1.0000,		0.8549,		0.7255,
  0.8039,		0.5216,		0.2471,
  1.0000,		0.7529,		0.7961,
  0.8667,		0.6275,		0.8667,
  0.6902,		0.8784,		0.9020,
  0.5020,		0.0000,		0.5020,
  1.0000,		0.0000,		0.0000,
  0.7373,		0.5608,		0.5608,
  0.2549,		0.4118,		0.8824,
  0.5451,		0.2706,		0.0745,
  0.9804,		0.5020,		0.4471,
  0.9569,		0.6431,		0.3765,
  0.1804,		0.5451,		0.3412,
  1.0000,		0.9608,		0.9333,
  0.6275,		0.3216,		0.1765,
  0.7529,		0.7529,		0.7529,
  0.5294,		0.8078,		0.9216,
  0.4157,		0.3529,		0.8039,
  0.4392,		0.5020,		0.5647,
  0.4392,		0.5020,		0.5647,
  1.0000,		0.9804,		0.9804,
  0.0000,		1.0000,		0.4980,
  0.2745,		0.5098,		0.7059,
  0.8235,		0.7059,		0.5490,
  0.0000,		0.5020,		0.5020,
  0.8471,		0.7490,		0.8471,
  1.0000,		0.3882,		0.2784,
  0.2510,		0.8784,		0.8157,
  0.9333,		0.5098,		0.9333,
  0.9608,		0.8706,		0.7020,
  1.0000,		1.0000,		1.0000,
  0.9608,		0.9608,		0.9608,
  1.0000,		1.0000,		0.0000,
  0.6039,		0.8039,		0.1961
};

static const double discrete_key[256][3] = {
  0.8627,		0.0784,		0.2353,
  0.5804,		0.0000,		0.8275,
  0.2000,		0.2000,		1.0000,
  0.0000,		0.0000,		0.5020,
  0.0000,		0.3569,		0.5020,
  0.3750,		0.5625,		0.0000,
  0.0000,		0.6100,		0.5800,
  0.8600,		0.0000,		0.3500,
  0.6900,		0.3725,		0.2353,
  0.0000,		1.0000,		0.4980,
  0.0000,		0.3922,		0.0000,
  0.7216,		0.5255,		0.0431,
  1.0000,		0.2706,		0.0000,
  0.9255,		0.3255,		0.6588,
  0.1600,		0.4000,		0.7215,
  0.5852,		0.4117,		0.9960,
  0.0230,		0.8627,		0.9843,
  1.0000,		0.5700,		0.0000,
  1.0000,		0.0000,		0.0000
};

ColorMap::ColorMap()
{
  for (size_t i = 0, iEnd = 64; i < iEnd; ++ i) {
    _jet.push_back(osg::Vec4(jet[i][0], jet[i][1], jet[i][2], 1.0f));
  }

  for (size_t i = 0, iEnd = 147; i < iEnd; ++ i) {
    _discrete_total.push_back(osg::Vec4(discrete_total[i][0], discrete_total[i][1], discrete_total[i][2], 1.0f));
  }

  for (size_t i = 0, iEnd = 19; i < iEnd; ++ i) {
    _discrete_key.push_back(osg::Vec4(discrete_key[i][0], discrete_key[i][1], discrete_key[i][2], 1.0f));
  }

  _lightBlue = osg::Vec4(0.75f, 0.94f, 1.0f, 1.0f);
  return;
}

const osg::Vec4& ColorMap::getColor(NamedColor nameColor)
{
  switch(nameColor) {
  case(LIGHT_BLUE):
    return _lightBlue;
    break;
  default:
    return _lightBlue;
    break;
  }

  return _lightBlue;
}

const osg::Vec4& ColorMap::getColor(Map map, float value, float low, float high)
{
  switch(map) {
  case(JET):
    return getColor(_jet, value, low, high);
    break;
  default:
    return getColor(_jet, value, low, high);
    break;
  }

  return getColor(_jet, value, low, high);
}

const osg::Vec4& ColorMap::getColor(DiscreteColor map, int idx)
{
  switch(map) {
  case(DISCRETE_TOTAL):
    return getColor(_discrete_total, idx);
    break;
  case(DISCRETE_KEY):
    return getColor(_discrete_key, idx);
    break;
  default:
    return getColor(_discrete_total, idx);
    break;
  }

  return getColor(_discrete_total, idx);
}

const osg::Vec4& ColorMap::getColor(const std::vector<osg::Vec4>& map, float value, float low, float high)
{
  int numColor = map.size();

  if (low > high) {
    std::swap(low, high);
  }

  int index = std::abs((value-low)/(high-low)*numColor);
  index = index%numColor;

  return map[index];
}

const osg::Vec4& ColorMap::getColor(const std::vector<osg::Vec4>& map, int idx)
{
  return map[idx%map.size()];
}